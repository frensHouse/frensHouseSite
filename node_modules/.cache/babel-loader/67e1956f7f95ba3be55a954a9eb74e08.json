{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { notification } from \"antd\";\nimport axios from \"axios\";\nexport const useForm = validate => {\n  _s();\n\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [shouldSubmit, setShouldSubmit] = useState(false);\n\n  const openNotificationWithIcon = () => {\n    notification[\"success\"]({\n      message: \"Success\",\n      description: \"Your message has been sent!\"\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setErrors(validate(values)); // Your url for API\n\n    const url = \"\";\n\n    if (Object.keys(values).length === 3) {\n      axios.post(url, { ...values\n      }).then(() => {\n        setShouldSubmit(true);\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\n      setValues(\"\");\n      openNotificationWithIcon();\n    }\n  }, [errors, shouldSubmit]);\n\n  const handleChange = event => {\n    event.persist();\n    setValues(values => ({ ...values,\n      [event.target.name]: event.target.value\n    }));\n    setErrors(errors => ({ ...errors,\n      [event.target.name]: \"\"\n    }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\n_s(useForm, \"0UnAs8VM/NLkYOO2zrZDWUW/LkA=\");","map":{"version":3,"sources":["/Users/daslappy/Desktop/Projects/FRNSWEB/frenshouseweb/src/common/utils/useForm.tsx"],"names":["useState","useEffect","notification","axios","useForm","validate","values","setValues","errors","setErrors","shouldSubmit","setShouldSubmit","openNotificationWithIcon","message","description","handleSubmit","event","preventDefault","url","Object","keys","length","post","then","handleChange","persist","target","name","value"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,MAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,OAAO,GAAIC,QAAD,IAAmB;AAAA;;AACxC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMY,wBAAwB,GAAG,MAAM;AACrCV,IAAAA,YAAY,CAAC,SAAD,CAAZ,CAAwB;AACtBW,MAAAA,OAAO,EAAE,SADa;AAEtBC,MAAAA,WAAW,EAAE;AAFS,KAAxB;AAID,GALD;;AAOA,QAAMC,YAAY,GAAIC,KAAD,IAA+C;AAClEA,IAAAA,KAAK,CAACC,cAAN;AACAR,IAAAA,SAAS,CAACJ,QAAQ,CAACC,MAAD,CAAT,CAAT,CAFkE,CAGlE;;AACA,UAAMY,GAAG,GAAG,EAAZ;;AACA,QAAIC,MAAM,CAACC,IAAP,CAAYd,MAAZ,EAAoBe,MAApB,KAA+B,CAAnC,EAAsC;AACpClB,MAAAA,KAAK,CACFmB,IADH,CACQJ,GADR,EACa,EACT,GAAGZ;AADM,OADb,EAIGiB,IAJH,CAIQ,MAAM;AACVZ,QAAAA,eAAe,CAAC,IAAD,CAAf;AACD,OANH;AAOD;AACF,GAdD;;AAgBAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,MAAM,CAACC,IAAP,CAAYZ,MAAZ,EAAoBa,MAApB,KAA+B,CAA/B,IAAoCX,YAAxC,EAAsD;AACpDH,MAAAA,SAAS,CAAC,EAAD,CAAT;AACAK,MAAAA,wBAAwB;AACzB;AACF,GALQ,EAKN,CAACJ,MAAD,EAASE,YAAT,CALM,CAAT;;AAOA,QAAMc,YAAY,GAAIR,KAAD,IAAgD;AACnEA,IAAAA,KAAK,CAACS,OAAN;AACAlB,IAAAA,SAAS,CAAED,MAAD,KAAa,EACrB,GAAGA,MADkB;AAErB,OAACU,KAAK,CAACU,MAAN,CAAaC,IAAd,GAAqBX,KAAK,CAACU,MAAN,CAAaE;AAFb,KAAb,CAAD,CAAT;AAIAnB,IAAAA,SAAS,CAAED,MAAD,KAAa,EAAE,GAAGA,MAAL;AAAa,OAACQ,KAAK,CAACU,MAAN,CAAaC,IAAd,GAAqB;AAAlC,KAAb,CAAD,CAAT;AACD,GAPD;;AASA,SAAO;AACLH,IAAAA,YADK;AAELT,IAAAA,YAFK;AAGLT,IAAAA,MAHK;AAILE,IAAAA;AAJK,GAAP;AAMD,CAlDM;;GAAMJ,O","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { notification } from \"antd\";\nimport axios from \"axios\";\n\nexport const useForm = (validate: any) => {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [shouldSubmit, setShouldSubmit] = useState(false);\n\n  const openNotificationWithIcon = () => {\n    notification[\"success\"]({\n      message: \"Success\",\n      description: \"Your message has been sent!\",\n    });\n  };\n\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setErrors(validate(values));\n    // Your url for API\n    const url = \"\";\n    if (Object.keys(values).length === 3) {\n      axios\n        .post(url, {\n          ...values,\n        })\n        .then(() => {\n          setShouldSubmit(true);\n        });\n    }\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\n      setValues(\"\");\n      openNotificationWithIcon();\n    }\n  }, [errors, shouldSubmit]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.persist();\n    setValues((values) => ({\n      ...values,\n      [event.target.name]: event.target.value,\n    }));\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}